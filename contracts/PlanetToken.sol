// SPDX-License-Identifier: MIT
// @Author: Asad Iqbal
pragma solidity ^0.5.0;

import "./ERC721Full.sol";

contract PlanetToken is ERC721Full {
    //TODO: fix type cast errors for address 
    string public planet_name;
    uint public planetCount = 0;
    mapping(uint => Planet) public planets;

    // store Planet Token information in a data structure
    struct Planet{
        uint id;
        string hash;
        string price;
        string planet_name;
        // msg.sender is payable 
        address payable owner;
    }
    // event for when Planet token is created
    event PlanetGenerated (
        uint id,
        string hash,
        string price,
        string planet_name,
        address payable owner
    );

    // event for when Planet Token is transfered
    event PlanetTokenTransfer(
        uint id, 
        string hash, 
        string price, 
        string planet_name,
        address payable owner

    );

    constructor() ERC721Full("planet", "PLANET") public { 

    }
    
    // TODO Create function to upload planet img to ipfs , increment index and mint nft to owner who uploads it
    function createPlanet(string memory _imgHash, string memory _price, string memory _planetName) public {
        // Check for image hash -> should exist
        require(bytes(_imgHash).length > 0);
        // Check planet has a name 
       require(bytes(_planetName).length > 0 );
        // Check owner has an address assigned
        require(bytes(_price).length > 0);
        // Check address which uploads file exists
        require( msg.sender != address(0));
        // Increment planet id upon token creation
        planetCount++;
       // TODO fix type cast issue in payable

        // Add planet 
        planets[planetCount] = Planet(planetCount, _imgHash, _price, _planetName, msg.sender);
        // Trigger event 
        emit PlanetGenerated(planetCount, _imgHash, _price, _planetName, msg.sender);
        // track planet planetCount
        uint _id = planetCount;
        // create NFT by minting token -> initial nft is generated by the owner 
        _mint(msg.sender, _id);
    }
    // TODO Create a payable function which checks existing id fetchs img, owner and transfers token ownership
  
   function transferPlanet(uint _id) public payable{
        // Check if the id exists and is valid
        require(_id > 0 && _id <= planetCount);
        // Get the planet
        Planet memory _planet = planets[_id];
        // Fetch owner
        address payable _owner = _planet.owner;
        // New owner
        address payable _newowner =  msg.sender;
        // Pay the owner by sending ether
        address(_owner).transfer(msg.value);
        // Transfer Token ownership
        _transferFrom(_owner, _newowner, _id);
        // Update planet in struct
        _planet.owner = _newowner;
        // update planet
        planets[_id] = _planet;
        // Trigger event that token has been transfered
        emit PlanetTokenTransfer(_id, _planet.hash, _planet.price, _planet.planet_name, _planet.owner);
    }
}